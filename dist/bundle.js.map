{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/map.js","webpack:///./src/parse_response.js","webpack:///./src/request_mta.js","webpack:///./src/index.js","webpack:///./node_modules/protobufjs/src/util.js","webpack:///./node_modules/protobufjs/src/enum.js","webpack:///./node_modules/protobufjs/src/util/minimal.js","webpack:///./node_modules/protobufjs/src/field.js","webpack:///./node_modules/protobufjs/src/types.js","webpack:///./node_modules/protobufjs/src/object.js","webpack:///./node_modules/protobufjs/src/namespace.js","webpack:///./node_modules/protobufjs/src/oneof.js","webpack:///./node_modules/protobufjs/src/root.js","webpack:///./node_modules/protobufjs/src/message.js","webpack:///./node_modules/protobufjs/src/method.js","webpack:///./node_modules/protobufjs/src/service.js","webpack:///./node_modules/protobufjs/src/mapfield.js","webpack:///./node_modules/protobufjs/src/type.js","webpack:///./node_modules/protobufjs/src/reader.js","webpack:///./node_modules/protobufjs/src/writer.js","webpack:///./node_modules/protobufjs/src/tokenize.js","webpack:///./node_modules/protobufjs/src/wrappers.js","webpack:///./node_modules/protobufjs/src/converter.js","webpack:///./node_modules/protobufjs/src/verifier.js","webpack:///./node_modules/protobufjs/src/decoder.js","webpack:///./node_modules/protobufjs/src/encoder.js","webpack:///./node_modules/protobufjs/src/roots.js","webpack:///./node_modules/protobufjs/src/rpc.js","webpack:///./node_modules/@protobufjs/inquire/index.js","webpack:///./node_modules/@protobufjs/aspromise/index.js","webpack:///./node_modules/protobufjs/src/common.js","webpack:///./node_modules/protobufjs/src/parse.js","webpack:///./node_modules/@protobufjs/path/index.js","webpack:///./node_modules/@protobufjs/fetch/index.js","webpack:///./node_modules/@protobufjs/codegen/index.js","webpack:///./node_modules/protobufjs/src/rpc/service.js","webpack:///./node_modules/protobufjs/src/reader_buffer.js","webpack:///./node_modules/protobufjs/src/writer_buffer.js","webpack:///./node_modules/protobufjs/src/util/longbits.js","webpack:///./node_modules/@protobufjs/pool/index.js","webpack:///./node_modules/@protobufjs/utf8/index.js","webpack:///./node_modules/@protobufjs/float/index.js","webpack:///./node_modules/@protobufjs/eventemitter/index.js","webpack:///./node_modules/@protobufjs/base64/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/protobufjs/src/index-minimal.js","webpack:///./node_modules/protobufjs/src/index-light.js","webpack:///./node_modules/protobufjs/src/index.js","webpack:///./node_modules/protobufjs/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","map","google","maps","Map","document","getElementById","center","lat","lng","zoom","styles","featureType","elementType","stylers","visibility","color","parse_response","data","console","log","request_mta","$","ajax","url","encoding","then","errors","addEventListener","window","initMap","requestMta","Type","Enum","util","roots","codegen","fetch","path","fs","inquire","toArray","keys","array","Array","length","index","toObject","key","val","undefined","safePropBackslashRe","safePropQuoteRe","isReserved","test","safeProp","prop","replace","ucFirst","str","charAt","toUpperCase","substring","camelCaseRe","camelCase","$0","$1","compareFieldsById","a","b","id","decorateType","ctor","typeName","$type","decorateRoot","remove","add","type","decorateEnumIndex","decorateEnum","enm","ReflectionObject","create","constructor","className","Namespace","values","options","comment","comments","this","TypeError","valuesById","reserved","fromJSON","json","toJSON","toJSONOptions","keepComments","Boolean","isString","isInteger","Error","isReservedId","isReservedName","allow_alias","merge","dst","src","ifNotSet","newError","CustomError","message","properties","captureStackTrace","stack","toString","asPromise","base64","EventEmitter","float","utf8","pool","LongBits","emptyArray","freeze","emptyObject","isNode","global","process","versions","node","Number","isFinite","Math","floor","String","isObject","isset","isSet","obj","isArray","Buffer","utf8Write","e","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","Uint8Array","Long","dcodeIO","key2Re","key32Re","key64Re","longToHash","from","toHash","zeroHash","longFromHash","hash","unsigned","bits","fromHash","fromBits","lo","hi","toNumber","lcFirst","toLowerCase","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","longs","enums","bytes","_configure","allocUnsafe","size","Field","types","ruleRe","rule","extend","required","optional","repeated","partOf","typeDefault","defaultValue","long","resolvedType","extensionField","declaringField","_packed","getOption","setOption","resolve","resolved","defaults","parent","lookupTypeOrEnum","packed","fromNumber","buf","decode","write","fieldId","fieldType","fieldRule","fieldName","default","Type_","bake","offset","basic","mapKey","Root","filename","defineProperties","root","ptr","fullName","unshift","join","onAdd","_handleAdd","onRemove","_handleRemove","setOptions","Root_","Service","arrayToJSON","nested","_nestedArray","clearCache","namespace","addJSON","nestedArray","nestedJson","names","fields","methods","getEnum","prev","define","split","part","shift","resolveAll","lookup","filterTypes","parentAlreadyChecked","slice","found","indexOf","lookupType","lookupEnum","lookupService","Service_","OneOf","oneof","fieldsArray","addFieldsToParent","field","push","splice","arguments","oneofName","set","parse","common","deferred","files","SYNC","resolvePath","load","callback","self","sync","finish","err","cb","source","JSON","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","loadSync","exposeRe","tryHandleExtension","extendedType","sisterField","j","parse_","common_","Message","encode","writer","encodeDelimited","reader","decodeDelimited","verify","fromObject","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","rpc","_methodsArray","service","inherited","methodsArray","rpcImpl","requestDelimited","responseDelimited","method","rpcService","methodName","q","MapField","keyType","resolvedKeyType","fieldKeyType","fieldValueType","Reader","Writer","encoder","decoder","verifier","converter","wrappers","oneofs","extensions","group","_fieldsById","_fieldsArray","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","ctorProperties","mtype","gen","filter","setup","wrapper","originalThis","bind","len","fork","ldelim","uint32","target","BufferReader","indexOutOfRange","writeLength","RangeError","pos","buffer","create_array","readLongVarint","readFixed32_end","end","readFixed64","isBuffer","_slice","subarray","int32","sint32","bool","fixed32","sfixed32","readFloatLE","double","readDoubleLE","start","string","read","skip","skipType","wireType","BufferReader_","fn","int64","uint64","sint64","zzDecode","fixed64","sfixed64","BufferWriter","Op","next","noop","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","alloc","_push","zzEncode","writeFloatLE","writeDoubleLE","writeBytes","reset","BufferWriter_","tokenize","delimRe","stringDoubleRe","stringSingleRe","setCommentRe","setCommentAltRe","setCommentSplitRe","whitespaceRe","unescapeRe","unescapeMap","0","t","unescape","alternateCommentMode","line","commentType","commentText","commentLine","commentLineEmpty","stringDelim","illegal","subject","setComment","commentOffset","lines","trim","isDoubleSlashCommentLine","startOffset","endOffset","findEndOfLine","lineText","cursor","re","lastIndex","match","exec","readString","repeat","curr","isDoc","min","token","peek","expected","actual","cmnt","trailingLine","ret","type_url","substr","genValuePartial_fromObject","fieldIndex","isUnsigned","genValuePartial_toObject","sort","repeatedFields","mapFields","normalFields","low","high","fromCharCode","apply","hasKs2","seenFirstField","ref","invalid","genVerifyKey","genVerifyValue","oneofProp","rfield","missing","genTypePartial","moduleName","mod","eval","ctx","params","pending","Promise","reject","timeType","commonRe","protobuf","Any","Duration","seconds","nanos","Timestamp","Empty","Struct","Value","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","NULL_VALUE","ListValue","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","FieldMask","paths","file","keepCase","base10Re","base10NegRe","base16Re","base16NegRe","base8Re","base8NegRe","numberRe","nameRe","typeRefRe","fqTypeRefRe","pkg","syntax","tn","isProto3","applyCase","insideTryCatch","readValue","acceptTypeRef","sign","Infinity","NaN","parseInt","parseFloat","parseNumber","readRanges","acceptStrings","parseId","acceptNegative","parsePackage","parseImport","whichImports","parseSyntax","parseCommon","parseOption","ifBlock","valueType","parseInlineOptions","parseMapField","parseField","parseOneOf","parseType","dummy","parseEnumValue","parseEnum","parseMethod","parseService","reference","parseExtension","fnIf","fnElse","parseGroup","isCustom","parseOptionValue","package","isAbsolute","normalize","parts","absolute","prefix","originPath","includePath","alreadyNormalized","xhr","readFile","contents","XMLHttpRequest","binary","onreadystatechange","readyState","status","response","responseText","charCodeAt","overrideMimeType","open","send","functionParams","functionName","body","Codegen","formatStringOrScope","verbose","scopeKeys","scopeParams","scopeValues","scopeOffset","Function","formatParams","formatOffset","stringify","functionNameOverride","rpcCall","requestCtor","responseCtor","request","emit","endedByRPC","off","utf8Slice","writeBytesBuffer","copy","writeStringBuffer","byteLength","zero","fromString","toLong","mask","part0","part1","part2","SIZE","MAX","slab","chunk","c1","c2","factory","Float32Array","f32","f8b","le","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatBE","readFloatBE","writeFloat_ieee754","writeUint","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleBE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","_listeners","on","evt","listeners","args","ceil","b64","s64","g","configure","build"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","function initMap() {\n  const map = new google.maps.Map(document.getElementById('map'), {\n    center: {lat: 40.77, lng: -73.97},\n    zoom: 12.5,\n    styles: [\n      {\n        featureType: \"poi\",\n        elementType: \"labels\",\n        stylers: [{ visibility: \"off\" }]\n      },\n      {\n        featureType: \"water\",\n        elementType: \"labels\",\n        stylers: [{ visibility: \"off\" }]\n      },\n      {\n        featureType: \"road\",\n        elementType: \"labels\",\n        stylers: [{ visibility: \"off\" }]\n      },\n      {\n        elementType: 'geometry',\n        stylers: [{color: '#f5f5f5'}]\n      },\n      {\n        featureType: 'transit.line',\n        elementType: 'geometry',\n        stylers: [{color: '#e5e5e5'}]\n      },\n      {\n        featureType: 'water',\n        elementType: 'geometry',\n        stylers: [{color: '#c9c9c9'}]\n      }\n    ]\n  });\n}\n\nexport default initMap;\n","import ProtoBuf from 'protobufjs';\n\nfunction parseRespose(data) {\n  console.log(data);\n}\n\nexport default parseRespose;\n","import parseRespose from './parse_response';\n\nfunction requestMta() {\n  $.ajax({\n    url: 'https://crossorigin.me/http://datamine.mta.info/mta_esi.php?key=19308d0a671d13b31508fb043399d045',\n    encoding: null\n  }).then((data) => parseRespose(data), (errors) => console.log(errors))\n}\n\nexport default requestMta;\n","import initMap from './map';\nimport requestMta from './request_mta';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.initMap = initMap;\n  // setInterval(requestMta, 31000);\n  window.requestMta = requestMta;\n});\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(\"./util/minimal\");\r\n\r\nvar roots = require(\"./roots\");\r\n\r\nvar Type, // cyclic\r\n    Enum;\r\n\r\nutil.codegen = require(\"@protobufjs/codegen\");\r\nutil.fetch   = require(\"@protobufjs/fetch\");\r\nutil.path    = require(\"@protobufjs/path\");\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (object) {\r\n        var keys  = Object.keys(object),\r\n            array = new Array(keys.length),\r\n            index = 0;\r\n        while (index < keys.length)\r\n            array[index] = object[keys[index++]];\r\n        return array;\r\n    }\r\n    return [];\r\n};\r\n\r\n/**\r\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\r\n * @param {Array.<*>} array Array to convert\r\n * @returns {Object.<string,*>} Converted object\r\n */\r\nutil.toObject = function toObject(array) {\r\n    var object = {},\r\n        index  = 0;\r\n    while (index < array.length) {\r\n        var key = array[index++],\r\n            val = array[index++];\r\n        if (val !== undefined)\r\n            object[key] = val;\r\n    }\r\n    return object;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Tests whether the specified name is a reserved word in JS.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nutil.isReserved = function isReserved(name) {\r\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified property name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\r\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n    return \".\" + prop;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\nvar camelCaseRe = /_([a-z])/g;\r\n\r\n/**\r\n * Converts a string to camel case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0, 1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n};\r\n\r\n/**\r\n * Decorator helper for types (TypeScript).\r\n * @param {Constructor<T>} ctor Constructor function\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {Type} Reflected type\r\n * @template T extends Message<T>\r\n * @property {Root} root Decorators root\r\n */\r\nutil.decorateType = function decorateType(ctor, typeName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (ctor.$type) {\r\n        if (typeName && ctor.$type.name !== typeName) {\r\n            util.decorateRoot.remove(ctor.$type);\r\n            ctor.$type.name = typeName;\r\n            util.decorateRoot.add(ctor.$type);\r\n        }\r\n        return ctor.$type;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(\"./type\");\r\n\r\n    var type = new Type(typeName || ctor.name);\r\n    util.decorateRoot.add(type);\r\n    type.ctor = ctor; // sets up .encode, .decode etc.\r\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\r\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\r\n    return type;\r\n};\r\n\r\nvar decorateEnumIndex = 0;\r\n\r\n/**\r\n * Decorator helper for enums (TypeScript).\r\n * @param {Object} object Enum object\r\n * @returns {Enum} Reflected enum\r\n */\r\nutil.decorateEnum = function decorateEnum(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (object.$type)\r\n        return object.$type;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Enum)\r\n        Enum = require(\"./enum\");\r\n\r\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\r\n    util.decorateRoot.add(enm);\r\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Decorator root (TypeScript).\r\n * @name util.decorateRoot\r\n * @type {Root}\r\n * @readonly\r\n */\r\nObject.defineProperty(util, \"decorateRoot\", {\r\n    get: function() {\r\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(\"./root\"))());\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar Namespace = require(\"./namespace\"),\r\n    util = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this enum\r\n * @param {Object.<string,string>} [comments] The value comments for this enum\r\n */\r\nfunction Enum(name, values, options, comment, comments) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Enum comment text.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = comments || {};\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\r\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {IEnum} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\r\n    enm.reserved = json.reserved;\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IEnum} Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"  , this.options,\r\n        \"values\"   , this.values,\r\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"comment\"  , keepComments ? this.comment : undefined,\r\n        \"comments\" , keepComments ? this.comments : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {string} [comment] Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function add(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n\r\n    if (this.isReservedId(id))\r\n        throw Error(\"id \" + id + \" is reserved in \" + this);\r\n\r\n    if (this.isReservedName(name))\r\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id \" + id + \" in \" + this);\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function remove(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val == null)\r\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(\"@protobufjs/aspromise\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(\"@protobufjs/base64\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\r\n\r\n// float handling accross browsers\r\nutil.float = require(\"@protobufjs/float\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(\"@protobufjs/inquire\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(\"@protobufjs/utf8\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(\"@protobufjs/pool\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(\"./enum\"),\r\n    types = require(\"./types\"),\r\n    util  = require(\"./util\");\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction Field(name, id, type, rule, extend, options, comment) {\r\n\r\n    if (util.isObject(rule)) {\r\n        comment = extend;\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        comment = options;\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {Type|null}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {OneOf|null}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {Type|Enum|null}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {Field|null}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {Field|null}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {boolean|null}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IField} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] != null) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary options\r\n    if (this.options) {\r\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n            delete this.options.packed;\r\n        if (!Object.keys(this.options).length)\r\n            this.options = undefined;\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    // ensure proper value on prototype\r\n    if (this.parent instanceof Type)\r\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\r\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\r\n\r\n    // submessage: decorate the submessage and use its name as the type\r\n    if (typeof fieldType === \"function\")\r\n        fieldType = util.decorateType(fieldType).name;\r\n\r\n    // enum reference: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldType && typeof fieldType === \"object\")\r\n        fieldType = util.decorateEnum(fieldType).name;\r\n\r\n    return function fieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\r\n    };\r\n};\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\r\n// like Field.d but without a default value\r\n\r\nField._configure = function configure(Type_) {\r\n    Type = Type_;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(\"./util\");\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @const\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {null} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(\"./util\");\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {Namespace|null}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {string|null}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(\"./enum\"),\r\n    Field    = require(\"./field\"),\r\n    util     = require(\"./util\");\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array, toJSONOptions) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedId = function isReservedId(reserved, id) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedName = function isReservedName(reserved, name) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {ReflectionObject[]|null}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * Namespace descriptor.\r\n * @interface INamespace\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Any extension field descriptor.\r\n * @typedef AnyExtensionField\r\n * @type {IExtensionField|IExtensionMapField}\r\n */\r\n\r\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedObject\r\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\r\n */\r\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\r\n\r\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {INamespace} Namespace descriptor\r\n */\r\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum: \" + name);\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterTypes === \"boolean\") {\r\n        parentAlreadyChecked = filterTypes;\r\n        filterTypes = undefined;\r\n    } else if (filterTypes && !Array.isArray(filterTypes))\r\n        filterTypes = [ filterTypes ];\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterTypes);\r\n\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\r\n            return found;\r\n\r\n    // Otherwise try each nested namespace\r\n    } else\r\n        for (var i = 0; i < this.nestedArray.length; ++i)\r\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\r\n                return found;\r\n\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterTypes);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, [ Type ]);\r\n    if (!found)\r\n        throw Error(\"no such type: \" + path);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Enum} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, [ Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type or enum\r\n * @throws {Error} If `path` does not point to a type or enum\r\n */\r\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\r\n    var found = this.lookup(path, [ Type, Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, [ Service ]);\r\n    if (!found)\r\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(\"./field\"),\r\n    util  = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction OneOf(name, fieldNames, options, comment) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Oneof descriptor.\r\n * @interface IOneOf\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\r\n\r\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {IOneOf} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IOneOf} Oneof descriptor\r\n */\r\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"oneof\"   , this.oneof,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n\r\n    /* istanbul ignore if */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\r\n * @typedef OneOfDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} oneofName OneOf name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * OneOf decorator (TypeScript).\r\n * @function\r\n * @param {...string} fieldNames Field names\r\n * @returns {OneOfDecorator} Decorator function\r\n * @template T extends string\r\n */\r\nOneOf.d = function decorateOneOf() {\r\n    var fieldNames = new Array(arguments.length),\r\n        index = 0;\r\n    while (index < arguments.length)\r\n        fieldNames[index] = arguments[index++];\r\n    return function oneOfDecorator(prototype, oneofName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new OneOf(oneofName, fieldNames));\r\n        Object.defineProperty(prototype, oneofName, {\r\n            get: util.oneOfGetter(fieldNames),\r\n            set: util.oneOfSetter(fieldNames)\r\n        });\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(\"./field\"),\r\n    Enum    = require(\"./enum\"),\r\n    OneOf   = require(\"./oneof\"),\r\n    util    = require(\"./util\");\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Properties<T>} [properties] Properties to set\r\n * @template T extends object\r\n */\r\nfunction Message(properties) {\r\n    // not used internally\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/*eslint-disable valid-jsdoc*/\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<T>} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.create = function create(properties) {\r\n    return this.$type.create(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {T} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {T} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n\r\n/*eslint-enable valid-jsdoc*/","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this method\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedResponseType = null;\r\n\r\n    /**\r\n     * Comment for this method\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Method descriptor.\r\n * @interface IMethod\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n */\r\n\r\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {IMethod} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this method to a method descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMethod} Method descriptor\r\n */\r\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        \"requestType\"    , this.requestType,\r\n        \"requestStream\"  , this.requestStream,\r\n        \"responseType\"   , this.responseType,\r\n        \"responseStream\" , this.responseStream,\r\n        \"options\"        , this.options,\r\n        \"comment\"        , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(\"./method\"),\r\n    util   = require(\"./util\"),\r\n    rpc    = require(\"./rpc\");\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {Method[]|null}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Service descriptor.\r\n * @interface IService\r\n * @extends INamespace\r\n * @property {Object.<string,IMethod>} methods Method descriptors\r\n */\r\n\r\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {IService} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    if (json.nested)\r\n        service.addJSON(json.nested);\r\n    service.comment = json.comment;\r\n    return service;\r\n};\r\n\r\n/**\r\n * Converts this service to a service descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IService} Service descriptor\r\n */\r\nService.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , inherited && inherited.options || undefined,\r\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\r\n        \"nested\"  , inherited && inherited.nested || undefined,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore if */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\r\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\r\n            m: method,\r\n            q: method.resolvedRequestType.ctor,\r\n            s: method.resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(\"./field\");\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(\"./types\"),\r\n    util    = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction MapField(name, id, keyType, type, options, comment) {\r\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {ReflectionObject|null}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends {IField}\r\n * @property {string} keyType Key type\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {IMapField} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMapField} Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"keyType\" , this.keyType,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\r\n */\r\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\r\n\r\n    // submessage value: decorate the submessage and use its name as the type\r\n    if (typeof fieldValueType === \"function\")\r\n        fieldValueType = util.decorateType(fieldValueType).name;\r\n\r\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldValueType && typeof fieldValueType === \"object\")\r\n        fieldValueType = util.decorateEnum(fieldValueType).name;\r\n\r\n    return function mapFieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(\"./enum\"),\r\n    OneOf     = require(\"./oneof\"),\r\n    Field     = require(\"./field\"),\r\n    MapField  = require(\"./mapfield\"),\r\n    Service   = require(\"./service\"),\r\n    Message   = require(\"./message\"),\r\n    Reader    = require(\"./reader\"),\r\n    Writer    = require(\"./writer\"),\r\n    util      = require(\"./util\"),\r\n    encoder   = require(\"./encoder\"),\r\n    decoder   = require(\"./decoder\"),\r\n    verifier  = require(\"./verifier\"),\r\n    converter = require(\"./converter\"),\r\n    wrappers  = require(\"./wrappers\");\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {Object.<number,Field>|null}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {Field[]|null}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {OneOf[]|null}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {Constructor<{}>}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n\r\n            /* istanbul ignore if */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore if */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\r\n     * @name Type#ctor\r\n     * @type {Constructor<{}>}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\r\n        },\r\n        set: function(ctor) {\r\n\r\n            // Ensure proper prototype\r\n            var prototype = ctor.prototype;\r\n            if (!(prototype instanceof Message)) {\r\n                (ctor.prototype = new Message()).constructor = ctor;\r\n                util.merge(ctor.prototype, prototype);\r\n            }\r\n\r\n            // Classes and messages reference their reflected type\r\n            ctor.$type = ctor.prototype.$type = this;\r\n\r\n            // Mix in static methods\r\n            util.merge(ctor, Message, true);\r\n\r\n            this._ctor = ctor;\r\n\r\n            // Messages have non-enumerable default values on their prototype\r\n            var i = 0;\r\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\r\n                this._fieldsArray[i].resolve(); // ensures a proper value\r\n\r\n            // Messages have non-enumerable getters and setters for each virtual oneof field\r\n            var ctorProperties = {};\r\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\r\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\r\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\r\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\r\n                };\r\n            if (i)\r\n                Object.defineProperties(ctor.prototype, ctorProperties);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nType.generateConstructor = function generateConstructor(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"p\"], mtype.name);\r\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\r\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\r\n        if ((field = mtype._fieldsArray[i]).map) gen\r\n            (\"this%s={}\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    return gen\r\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\r\n        (\"this[ks[i]]=p[ks[i]]\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Message type descriptor.\r\n * @interface IType\r\n * @extends INamespace\r\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\r\n * @property {Object.<string,IField>} fields Field descriptors\r\n * @property {number[][]} [extensions] Extension ranges\r\n * @property {number[][]} [reserved] Reserved ranges\r\n * @property {boolean} [group=false] Whether a legacy group or not\r\n */\r\n\r\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param {string} name Message name\r\n * @param {IType} json Message type descriptor\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    if (json.comment)\r\n        type.comment = json.comment;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IType} Message type descriptor\r\n */\r\nType.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"    , inherited && inherited.options || undefined,\r\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\r\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\r\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"group\"      , this.group || undefined,\r\n        \"nested\"     , inherited && inherited.nested || undefined,\r\n        \"comment\"    , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n\r\n    // Replace setup methods with type-specific generated functions\r\n    this.encode = encoder(this)({\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this)({\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = converter.fromObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n\r\n    // Inject custom wrappers for common types\r\n    var wrapper = wrappers[fullName];\r\n    if (wrapper) {\r\n        var originalThis = Object.create(this);\r\n        // if (wrapper.fromObject) {\r\n            originalThis.fromObject = this.fromObject;\r\n            this.fromObject = wrapper.fromObject.bind(originalThis);\r\n        // }\r\n        // if (wrapper.toObject) {\r\n            originalThis.toObject = this.toObject;\r\n            this.toObject = wrapper.toObject.bind(originalThis);\r\n        // }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError<{}>} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object to convert\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @interface IConversionOptions\r\n * @property {Function} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {Function} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {Function} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Type.d} (TypeScript).\r\n * @typedef TypeDecorator\r\n * @type {function}\r\n * @param {Constructor<T>} target Target constructor\r\n * @returns {undefined}\r\n * @template T extends Message<T>\r\n */\r\n\r\n/**\r\n * Type decorator (TypeScript).\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {TypeDecorator<T>} Decorator function\r\n * @template T extends Message<T>\r\n */\r\nType.d = function decorateType(typeName) {\r\n    return function typeDecorator(target) {\r\n        util.decorateType(target, typeName);\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nvar setCommentRe = /^ *[*/]+ */,\r\n    setCommentAltRe = /^\\s*\\*?\\/*/,\r\n    setCommentSplitRe = /\\n/g,\r\n    whitespaceRe = /\\s/,\r\n    unescapeRe = /\\\\(.?)/g;\r\n\r\nvar unescapeMap = {\r\n    \"0\": \"\\0\",\r\n    \"r\": \"\\r\",\r\n    \"n\": \"\\n\",\r\n    \"t\": \"\\t\"\r\n};\r\n\r\n/**\r\n * Unescapes a string.\r\n * @param {string} str String to unescape\r\n * @returns {string} Unescaped string\r\n * @property {Object.<string,string>} map Special characters map\r\n * @memberof tokenize\r\n */\r\nfunction unescape(str) {\r\n    return str.replace(unescapeRe, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            default:\r\n                return unescapeMap[$1] || \"\";\r\n        }\r\n    });\r\n}\r\n\r\ntokenize.unescape = unescape;\r\n\r\n/**\r\n * Gets the next token and advances.\r\n * @typedef TokenizerHandleNext\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Peeks for the next token.\r\n * @typedef TokenizerHandlePeek\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Pushes a token back to the stack.\r\n * @typedef TokenizerHandlePush\r\n * @type {function}\r\n * @param {string} token Token\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Skips the next token.\r\n * @typedef TokenizerHandleSkip\r\n * @type {function}\r\n * @param {string} expected Expected token\r\n * @param {boolean} [optional=false] If optional\r\n * @returns {boolean} Whether the token matched\r\n * @throws {Error} If the token didn't match and is not optional\r\n */\r\n\r\n/**\r\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\r\n * @typedef TokenizerHandleCmnt\r\n * @type {function}\r\n * @param {number} [line] Line number\r\n * @returns {string|null} Comment text or `null` if none\r\n */\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @interface ITokenizerHandle\r\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\r\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\r\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\r\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n * @property {number} line Current line number\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\r\n * @returns {ITokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source, alternateCommentMode) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0,\r\n        commentLineEmpty = false;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        commentLineEmpty = false;\r\n        var lookback;\r\n        if (alternateCommentMode) {\r\n            lookback = 2;  // alternate comment parsing: \"//\" or \"/*\"\r\n        } else {\r\n            lookback = 3;  // \"///\" or \"/**\"\r\n        }\r\n        var commentOffset = start - lookback,\r\n            c;\r\n        do {\r\n            if (--commentOffset < 0 ||\r\n                    (c = source.charAt(commentOffset)) === \"\\n\") {\r\n                commentLineEmpty = true;\r\n                break;\r\n            }\r\n        } while (c === \" \" || c === \"\\t\");\r\n        var lines = source\r\n            .substring(start, end)\r\n            .split(setCommentSplitRe);\r\n        for (var i = 0; i < lines.length; ++i)\r\n            lines[i] = lines[i]\r\n                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\")\r\n                .trim();\r\n        commentText = lines\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    function isDoubleSlashCommentLine(startOffset) {\r\n        var endOffset = findEndOfLine(startOffset);\r\n\r\n        // see if remaining line matches comment pattern\r\n        var lineText = source.substring(startOffset, endOffset);\r\n        // look for 1 or 2 slashes since startOffset would already point past\r\n        // the first slash that started the comment.\r\n        var isComment = /^\\s*\\/{1,2}/.test(lineText);\r\n        return isComment;\r\n    }\r\n\r\n    function findEndOfLine(cursor) {\r\n        // find end of cursor's line\r\n        var endOffset = cursor;\r\n        while (endOffset < length && charAt(endOffset) !== \"\\n\") {\r\n            endOffset++;\r\n        }\r\n        return endOffset;\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {string|null} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isDoc;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (whitespaceRe.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length) {\r\n                    throw illegal(\"comment\");\r\n                }\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    if (!alternateCommentMode) {\r\n                        // check for triple-slash comment\r\n                        isDoc = charAt(start = offset + 1) === \"/\";\r\n\r\n                        while (charAt(++offset) !== \"\\n\") {\r\n                            if (offset === length) {\r\n                                return null;\r\n                            }\r\n                        }\r\n                        ++offset;\r\n                        if (isDoc) {\r\n                            setComment(start, offset - 1);\r\n                        }\r\n                        ++line;\r\n                        repeat = true;\r\n                    } else {\r\n                        // check for double-slash comments, consolidating consecutive lines\r\n                        start = offset;\r\n                        isDoc = false;\r\n                        if (isDoubleSlashCommentLine(offset)) {\r\n                            isDoc = true;\r\n                            do {\r\n                                offset = findEndOfLine(offset);\r\n                                if (offset === length) {\r\n                                    break;\r\n                                }\r\n                                offset++;\r\n                            } while (isDoubleSlashCommentLine(offset));\r\n                        } else {\r\n                            offset = Math.min(length, findEndOfLine(offset) + 1);\r\n                        }\r\n                        if (isDoc) {\r\n                            setComment(start, offset);\r\n                        }\r\n                        line++;\r\n                        repeat = true;\r\n                    }\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    // check for /** (regular comment mode) or /* (alternate comment mode)\r\n                    start = offset + 1;\r\n                    isDoc = alternateCommentMode || charAt(start) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\") {\r\n                            ++line;\r\n                        }\r\n                        if (++offset === length) {\r\n                            throw illegal(\"comment\");\r\n                        }\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isDoc) {\r\n                        setComment(start, offset - 2);\r\n                    }\r\n                    repeat = true;\r\n                } else {\r\n                    return \"/\";\r\n                }\r\n            }\r\n        } while (repeat);\r\n\r\n        // offset !== length if we got here\r\n\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {string|null} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a comment.\r\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\r\n     * @returns {string|null} Comment text\r\n     * @inner\r\n     */\r\n    function cmnt(trailingLine) {\r\n        var ret = null;\r\n        if (trailingLine === undefined) {\r\n            if (commentLine === line - 1 && (alternateCommentMode || commentType === \"*\" || commentLineEmpty)) {\r\n                ret = commentText;\r\n            }\r\n        } else {\r\n            /* istanbul ignore else */\r\n            if (commentLine < trailingLine) {\r\n                peek();\r\n            }\r\n            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === \"/\")) {\r\n                ret = commentText;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    return Object.defineProperty({\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        cmnt: cmnt\r\n    }, \"line\", {\r\n        get: function() { return line; }\r\n    });\r\n    /* eslint-enable callback-return */\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * Wrappers for common types.\r\n * @type {Object.<string,IWrapper>}\r\n * @const\r\n */\r\nvar wrappers = exports;\r\n\r\nvar Message = require(\"./message\");\r\n\r\n/**\r\n * From object converter part of an {@link IWrapper}.\r\n * @typedef WrapperFromObjectConverter\r\n * @type {function}\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message<{}>} Message instance\r\n * @this Type\r\n */\r\n\r\n/**\r\n * To object converter part of an {@link IWrapper}.\r\n * @typedef WrapperToObjectConverter\r\n * @type {function}\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @this Type\r\n */\r\n\r\n/**\r\n * Common type wrapper part of {@link wrappers}.\r\n * @interface IWrapper\r\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\r\n * @property {WrapperToObjectConverter} [toObject] To object converter\r\n */\r\n\r\n// Custom wrapper for Any\r\nwrappers[\".google.protobuf.Any\"] = {\r\n\r\n    fromObject: function(object) {\r\n\r\n        // unwrap value type if mapped\r\n        if (object && object[\"@type\"]) {\r\n            var type = this.lookup(object[\"@type\"]);\r\n            /* istanbul ignore else */\r\n            if (type) {\r\n                // type_url does not accept leading \".\"\r\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\r\n                    object[\"@type\"].substr(1) : object[\"@type\"];\r\n                // type_url prefix is optional, but path seperator is required\r\n                return this.create({\r\n                    type_url: \"/\" + type_url,\r\n                    value: type.encode(type.fromObject(object)).finish()\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.fromObject(object);\r\n    },\r\n\r\n    toObject: function(message, options) {\r\n\r\n        // decode value if requested and unmapped\r\n        if (options && options.json && message.type_url && message.value) {\r\n            // Only use fully qualified type name after the last '/'\r\n            var name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\r\n            var type = this.lookup(name);\r\n            /* istanbul ignore else */\r\n            if (type)\r\n                message = type.decode(message.value);\r\n        }\r\n\r\n        // wrap value if unmapped\r\n        if (!(message instanceof this.ctor) && message instanceof Message) {\r\n            var object = message.$type.toObject(message, options);\r\n            object[\"@type\"] = message.$type.fullName;\r\n            return object;\r\n        }\r\n\r\n        return this.toObject(message, options);\r\n    }\r\n};\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(\"./enum\"),\r\n    util = require(\"./util\");\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %i:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\r\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        normalFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (!fields[i].partOf)\r\n            ( fields[i].resolve().repeated ? repeatedFields\r\n            : fields[i].map ? mapFields\r\n            : normalFields).push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (normalFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0; i < normalFields.length; ++i) {\r\n            var field = normalFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    var hasKs2 = false;\r\n    for (i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            index = mtype._fieldsArray.indexOf(field),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.map) {\r\n            if (!hasKs2) { hasKs2 = true; gen\r\n    (\"var ks2\");\r\n            } gen\r\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\r\n        (\"d%s={}\", prop)\r\n        (\"for(var j=0;j<ks2.length;++j){\");\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\r\n        (\"}\");\r\n        } else { gen\r\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\r\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\r\n        if (field.partOf) gen\r\n        (\"if(o.oneofs)\")\r\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\r\n        }\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(\"./enum\"),\r\n    util      = require(\"./util\");\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else {\r\n            gen\r\n            (\"{\")\r\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\r\n                (\"if(e)\")\r\n                    (\"return%j+e\", field.name + \".\")\r\n            (\"}\");\r\n        }\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n    var oneofs = mtype.oneofsArray,\r\n        seenFirstField = {};\r\n    if (oneofs.length) gen\r\n    (\"var p={}\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        if (field.optional) gen\r\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(!util.isObject(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"object\"))\r\n            (\"var k=Object.keys(%s)\", ref)\r\n            (\"for(var i=0;i<k.length;++i){\");\r\n                genVerifyKey(gen, field, \"k[i]\");\r\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(!Array.isArray(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"array\"))\r\n            (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                genVerifyValue(gen, field, i, ref + \"[i]\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (field.partOf) {\r\n                var oneofProp = util.safeProp(field.partOf.name);\r\n                if (seenFirstField[field.partOf.name] === 1) gen\r\n            (\"if(p%s===1)\", oneofProp)\r\n                (\"return%j\", field.partOf.name + \": multiple values\");\r\n                seenFirstField[field.partOf.name] = 1;\r\n                gen\r\n            (\"p%s=1\", oneofProp);\r\n            }\r\n            genVerifyValue(gen, field, i, ref);\r\n        }\r\n        if (field.optional) gen\r\n        (\"}\");\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(\"./enum\"),\r\n    types   = require(\"./types\"),\r\n    util    = require(\"./util\");\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %i:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            } else {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%i].decode(r))\"\r\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%i].decode(r)\"\r\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(\"./enum\"),\r\n    types    = require(\"./types\"),\r\n    util     = require(\"./util\");\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            index    = mtype._fieldsArray.indexOf(field),\r\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name) // !== undefined && !== null\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n            // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            } gen\r\n    (\"}\");\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (field.optional) gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(\"./rpc/service\");\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\nmodule.exports = common;\r\n\r\nvar commonRe = /\\/|\\./;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {INamespace} google/protobuf/any.proto Any\r\n * @property {INamespace} google/protobuf/duration.proto Duration\r\n * @property {INamespace} google/protobuf/empty.proto Empty\r\n * @property {INamespace} google/protobuf/field_mask.proto FieldMask\r\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\r\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\r\n * @example\r\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\r\n * protobuf.common(\"descriptor\", descriptorJson);\r\n *\r\n * // manually provides a custom definition (uses my.foo namespace)\r\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\r\n */\r\nfunction common(name, json) {\r\n    if (!commonRe.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Any message.\r\n     * @interface IAny\r\n     * @type {Object}\r\n     * @property {string} [typeUrl]\r\n     * @property {Uint8Array} [bytes]\r\n     * @memberof common\r\n     */\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Duration message.\r\n     * @interface IDuration\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Timestamp message.\r\n     * @interface ITimestamp\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Empty message.\r\n     * @interface IEmpty\r\n     * @memberof common\r\n     */\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Struct message.\r\n     * @interface IStruct\r\n     * @type {Object}\r\n     * @property {Object.<string,IValue>} [fields]\r\n     * @memberof common\r\n     */\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Value message.\r\n     * @interface IValue\r\n     * @type {Object}\r\n     * @property {string} [kind]\r\n     * @property {0} [nullValue]\r\n     * @property {number} [numberValue]\r\n     * @property {string} [stringValue]\r\n     * @property {boolean} [boolValue]\r\n     * @property {IStruct} [structValue]\r\n     * @property {IListValue} [listValue]\r\n     * @memberof common\r\n     */\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.ListValue message.\r\n     * @interface IListValue\r\n     * @type {Object}\r\n     * @property {Array.<IValue>} [values]\r\n     * @memberof common\r\n     */\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.DoubleValue message.\r\n     * @interface IDoubleValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.FloatValue message.\r\n     * @interface IFloatValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int64Value message.\r\n     * @interface IInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt64Value message.\r\n     * @interface IUInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int32Value message.\r\n     * @interface IInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt32Value message.\r\n     * @interface IUInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BoolValue message.\r\n     * @interface IBoolValue\r\n     * @type {Object}\r\n     * @property {boolean} [value]\r\n     * @memberof common\r\n     */\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.StringValue message.\r\n     * @interface IStringValue\r\n     * @type {Object}\r\n     * @property {string} [value]\r\n     * @memberof common\r\n     */\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BytesValue message.\r\n     * @interface IBytesValue\r\n     * @type {Object}\r\n     * @property {Uint8Array} [value]\r\n     * @memberof common\r\n     */\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"field_mask\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.FieldMask message.\r\n     * @interface IDoubleValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    FieldMask: {\r\n        fields: {\r\n            paths: {\r\n                rule: \"repeated\",\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Gets the root definition of the specified common proto file.\r\n *\r\n * Bundled definitions are:\r\n * - google/protobuf/any.proto\r\n * - google/protobuf/duration.proto\r\n * - google/protobuf/empty.proto\r\n * - google/protobuf/field_mask.proto\r\n * - google/protobuf/struct.proto\r\n * - google/protobuf/timestamp.proto\r\n * - google/protobuf/wrappers.proto\r\n *\r\n * @param {string} file Proto file name\r\n * @returns {INamespace|null} Root definition or `null` if not defined\r\n */\r\ncommon.get = function get(file) {\r\n    return common[file] || null;\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(\"./tokenize\"),\r\n    Root      = require(\"./root\"),\r\n    Type      = require(\"./type\"),\r\n    Field     = require(\"./field\"),\r\n    MapField  = require(\"./mapfield\"),\r\n    OneOf     = require(\"./oneof\"),\r\n    Enum      = require(\"./enum\"),\r\n    Service   = require(\"./service\"),\r\n    Method    = require(\"./method\"),\r\n    types     = require(\"./types\"),\r\n    util      = require(\"./util\");\r\n\r\nvar base10Re    = /^[1-9][0-9]*$/,\r\n    base10NegRe = /^-?[1-9][0-9]*$/,\r\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\r\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\r\n    base8Re     = /^0[0-7]+$/,\r\n    base8NegRe  = /^-?0[0-7]+$/,\r\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\r\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @interface IParserResult\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @interface IParseOptions\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of JSON serialization.\r\n * @interface IToJSONOptions\r\n * @property {boolean} [keepComments=false] Serializes comments.\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source, options.alternateCommentMode || false),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\r\n\r\n    /* istanbul ignore next */\r\n    function illegal(token, name, insideTryCatch) {\r\n        var filename = parse.filename;\r\n        if (!insideTryCatch)\r\n            parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            /* istanbul ignore if */\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (token) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\": case \"TRUE\":\r\n                return true;\r\n            case \"false\": case \"FALSE\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token, /* insideTryCatch */ true);\r\n        } catch (e) {\r\n\r\n            /* istanbul ignore else */\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n\r\n            /* istanbul ignore next */\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRanges(target, acceptStrings) {\r\n        var token, start;\r\n        do {\r\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\r\n                target.push(readString());\r\n            else\r\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\r\n        } while (skip(\",\", true));\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseNumber(token, insideTryCatch) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        switch (token) {\r\n            case \"inf\": case \"INF\": case \"Inf\":\r\n                return sign * Infinity;\r\n            case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\r\n                return NaN;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n        if (base10Re.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (base16Re.test(token))\r\n            return sign * parseInt(token, 16);\r\n        if (base8Re.test(token))\r\n            return sign * parseInt(token, 8);\r\n\r\n        /* istanbul ignore else */\r\n        if (numberRe.test(token))\r\n            return sign * parseFloat(token);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"number\", insideTryCatch);\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        switch (token) {\r\n            case \"max\": case \"MAX\": case \"Max\":\r\n                return 536870911;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!acceptNegative && token.charAt(0) === \"-\")\r\n            throw illegal(token, \"id\");\r\n\r\n        if (base10NegRe.test(token))\r\n            return parseInt(token, 10);\r\n        if (base16NegRe.test(token))\r\n            return parseInt(token, 16);\r\n\r\n        /* istanbul ignore else */\r\n        if (base8NegRe.test(token))\r\n            return parseInt(token, 8);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n\r\n        /* istanbul ignore if */\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n\r\n        pkg = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = readString();\r\n        isProto3 = syntax === \"proto3\";\r\n\r\n        /* istanbul ignore if */\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function ifBlock(obj, fnIf, fnElse) {\r\n        var trailingLine = tn.line;\r\n        if (obj) {\r\n            obj.comment = cmnt(); // try block-type comment\r\n            obj.filename = parse.filename;\r\n        }\r\n        if (skip(\"{\", true)) {\r\n            var token;\r\n            while ((token = next()) !== \"}\")\r\n                fnIf(token);\r\n            skip(\";\", true);\r\n        } else {\r\n            if (fnElse)\r\n                fnElse();\r\n            skip(\";\");\r\n            if (obj && typeof obj.comment !== \"string\")\r\n                obj.comment = cmnt(trailingLine); // try line-type comment if no block\r\n        }\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"type name\");\r\n\r\n        var type = new Type(token);\r\n        ifBlock(type, function parseType_block(token) {\r\n            if (parseCommon(type, token))\r\n                return;\r\n\r\n            switch (token) {\r\n\r\n                case \"map\":\r\n                    parseMapField(type, token);\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                case \"oneof\":\r\n                    parseOneOf(type, token);\r\n                    break;\r\n\r\n                case \"extensions\":\r\n                    readRanges(type.extensions || (type.extensions = []));\r\n                    break;\r\n\r\n                case \"reserved\":\r\n                    readRanges(type.reserved || (type.reserved = []), true);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n\r\n                    push(token);\r\n                    parseField(type, \"optional\");\r\n                    break;\r\n            }\r\n        });\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n\r\n        var field = new Field(name, parseId(next()), type, rule, extend);\r\n        ifBlock(field, function parseField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\r\n        // all known packable types and anything that could be an enum (= is not a basic type).\r\n        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        field.filename = parse.filename;\r\n        ifBlock(type, function parseGroup_block(token) {\r\n            switch (token) {\r\n\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        });\r\n        parent.add(type)\r\n              .add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n\r\n        skip(\",\");\r\n        var valueType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n\r\n        skip(\">\");\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        skip(\"=\");\r\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\r\n        ifBlock(field, function parseMapField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseMapField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var oneof = new OneOf(applyCase(token));\r\n        ifBlock(oneof, function parseOneOf_block(token) {\r\n            if (token === \"option\") {\r\n                parseOption(oneof, token);\r\n                skip(\";\");\r\n            } else {\r\n                push(token);\r\n                parseField(oneof, \"optional\");\r\n            }\r\n        });\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var enm = new Enum(token);\r\n        ifBlock(enm, function parseEnum_block(token) {\r\n          switch(token) {\r\n            case \"option\":\r\n              parseOption(enm, token);\r\n              skip(\";\");\r\n              break;\r\n\r\n            case \"reserved\":\r\n              readRanges(enm.reserved || (enm.reserved = []), true);\r\n              break;\r\n\r\n            default:\r\n              parseEnumValue(enm, token);\r\n          }\r\n        });\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            dummy = {};\r\n        ifBlock(dummy, function parseEnumValue_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(dummy, token); // skip\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseEnumValue_line() {\r\n            parseInlineOptions(dummy); // skip\r\n        });\r\n        parent.add(token, value, dummy.comment);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var isCustom = skip(\"(\", true);\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        if (isCustom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\r\n            do {\r\n                /* istanbul ignore if */\r\n                if (!nameRe.test(token = next()))\r\n                    throw illegal(token, \"name\");\r\n\r\n                if (peek() === \"{\")\r\n                    parseOptionValue(parent, name + \".\" + token);\r\n                else {\r\n                    skip(\":\");\r\n                    if (peek() === \"{\")\r\n                        parseOptionValue(parent, name + \".\" + token);\r\n                    else\r\n                        setOption(parent, name + \".\" + token, readValue(true));\r\n                }\r\n            } while (!skip(\"}\", true));\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var service = new Service(token);\r\n        ifBlock(service, function parseService_block(token) {\r\n            if (parseCommon(service, token))\r\n                return;\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"rpc\")\r\n                parseMethod(service, token);\r\n            else\r\n                throw illegal(token);\r\n        });\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token,\r\n            requestType, requestStream,\r\n            responseType, responseStream;\r\n\r\n        skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            requestStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            responseStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        ifBlock(method, function parseMethod_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(method, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        });\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"reference\");\r\n\r\n        var reference = token;\r\n        ifBlock(null, function parseExtension_block(token) {\r\n            switch (token) {\r\n\r\n                case \"required\":\r\n                case \"repeated\":\r\n                case \"optional\":\r\n                    parseField(parent, token, reference);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n                    push(token);\r\n                    parseField(parent, \"optional\", reference);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        switch (token) {\r\n\r\n            case \"package\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n\r\n                /* istanbul ignore else */\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(\"@protobufjs/aspromise\"),\r\n    inquire   = require(\"@protobufjs/inquire\");\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(\"./reader\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(\"./writer\");\r\nprotobuf.BufferWriter = require(\"./writer_buffer\");\r\nprotobuf.Reader       = require(\"./reader\");\r\nprotobuf.BufferReader = require(\"./reader_buffer\");\r\n\r\n// Utility\r\nprotobuf.util         = require(\"./util/minimal\");\r\nprotobuf.rpc          = require(\"./rpc\");\r\nprotobuf.roots        = require(\"./roots\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(\"./index-minimal\");\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\nprotobuf.converter        = require(\"./converter\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Message          = require(\"./message\");\r\nprotobuf.wrappers         = require(\"./wrappers\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.util             = require(\"./util\");\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\nprotobuf.Field._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(\"./index-light\");\r\n\r\nprotobuf.build = \"full\";\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\nprotobuf.common           = require(\"./common\");\r\n\r\n// Configure parser\r\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\r\n","// full library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index\");\r\n"],"sourceRoot":""}